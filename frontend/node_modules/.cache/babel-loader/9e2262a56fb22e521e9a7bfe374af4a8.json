{"ast":null,"code":"import Axios from \"axios\";\nAxios.defaults.baseURL = \"http://localhost:8080\";\nconst UNPROTECTED_PATHS = [\"loginUser\", \"registerUser\"];\n\nconst isUnprotectedPath = url => {\n  for (let path of UNPROTECTED_PATHS) {\n    if (url.includes(path)) {\n      return true;\n    }\n\n    return false;\n  }\n};\n\nAxios.interceptors.request.use(async config => {\n  if (isUnprotectedPath(config.url)) {\n    return config;\n  }\n\n  let token = localStorage.getItem(\"ACCESS_TOKEN\");\n  config.headers[\"Authorization\"] = `Bearer ${token}`;\n  return config;\n}, async error => {\n  throw error;\n});\nexport default Axios;","map":{"version":3,"sources":["/Users/atisyamsook/Desktop/js/project/frontend/src/config/axios.setup.js"],"names":["Axios","defaults","baseURL","UNPROTECTED_PATHS","isUnprotectedPath","url","path","includes","interceptors","request","use","config","token","localStorage","getItem","headers","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;AAEA,MAAMC,iBAAiB,GAAE,CACrB,WADqB,EAErB,cAFqB,CAAzB;;AAKA,MAAMC,iBAAiB,GAAGC,GAAD,IAAS;AAC9B,OAAI,IAAIC,IAAR,IAAgBH,iBAAhB,EAAkC;AAC9B,QAAGE,GAAG,CAACE,QAAJ,CAAaD,IAAb,CAAH,EAAsB;AAClB,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;AACJ,CAPD;;AASAN,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,MAAMC,MAAN,IAAe;AACX,MAAGP,iBAAiB,CAACO,MAAM,CAACN,GAAR,CAApB,EAAiC;AAC7B,WAAOM,MAAP;AACH;;AACD,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAZ;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAe,eAAf,IAAmC,UAASH,KAAM,EAAlD;AACA,SAAOD,MAAP;AACH,CARL,EASI,MAAMK,KAAN,IAAe;AACX,QAAMA,KAAN;AACH,CAXL;AAaA,eAAehB,KAAf","sourcesContent":["import Axios from \"axios\"\n\nAxios.defaults.baseURL = \"http://localhost:8080\"\n\nconst UNPROTECTED_PATHS =[\n    \"loginUser\",\n    \"registerUser\"\n]\n\nconst isUnprotectedPath= (url) => {\n    for(let path of UNPROTECTED_PATHS){\n        if(url.includes(path)){\n            return true\n        }\n        return false\n    }\n}\n\nAxios.interceptors.request.use(\n    async config =>{\n        if(isUnprotectedPath(config.url)){\n            return config\n        }\n        let token = localStorage.getItem(\"ACCESS_TOKEN\")\n        config.headers[\"Authorization\"] = `Bearer ${token}`\n        return config\n    },\n    async error => {\n        throw error\n    }\n)\nexport default Axios\n"]},"metadata":{},"sourceType":"module"}